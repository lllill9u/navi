function getCsrfToken(){
	return document.querySelector('meta[name="_csrf"]').getAttribute('content');
	}
function getCsrfHeader(){
	return document.querySelector('meta[name="_csrf_header"]').getAttribute('content');
}

$(":input[data-pg-init-value]").each(function(index, input) {
    let $input = $(input);
    let initValue = $input.data("pgInitValue");
    $input.val(initValue);
});


$("[data-pg-role='searchUI']").on('click', '[data-pg-role="searchBtn"]', function() {
	
	let $searchUI = $(this).parents("[data-pg-role='searchUI']");
	let targetFormSelector = $searchUI.data("pgTarget");
	let $targetForm = $(targetFormSelector);
	let formData = new FormData();
	$searchUI.find(":input[name]").each(function(index, input) {
		let name = input.name;
		let value = $(input).val();
		$targetForm.find(`input[name=${name}]`).val(value);
		formData.append(name, value);  //formData에 form의 데이터를 Map형식으로 넣어주기
	});
	
	
	let queryString = new URLSearchParams(formData); // 파라미터를 쿼리스트링으로 변환
    let url = $targetForm.attr("action"); // GET 요청이므로 파라미터를 URL에 추가
    let method = $targetForm.attr("method");

    console.log(url);
    console.log(method);
	
	let sendData = [];
	
   /* formData.forEach((key, val) => {
        console.log(key + " : " + val);
    });*/

	for (let [key, value] of formData) {
	    console.log(key + " : " + value);
	    let data = {};
	    data[key] = value;
	    sendData.push(data);
	}
	
	console.log(sendData);
/*console.log(sendData[0].key); // 첫 번째 객체의 key 속성에 해당하는 값
console.log(sendData[0].value); // 첫 번째 객체의 value 속성에 해당하는 값*/
/*	console.log(sendData[0].key);
	console.log(sendData[0].value);*/
	console.log(sendData[0]);
	console.log(sendData[0]["ts"]);
	console.log(sendData[1]["tps"]);
	console.log(sendData[2]["word"]);
	//비동기처리해야함 
	
    fetch(url, {
        method: method,
		headers:{
				"Accept":"application/json", //클라이언트가 서버로 보내는 요청 타입 
				"Content-Type":"application/json", // 서버가 클라이언트에게 보내는 요청 타입
				[getCsrfHeader()]: getCsrfToken()
			},
		body: JSON.stringify({//js객체를 json 문자열로 변환하는 함수
		        ts: sendData[0]["ts"],
		        tps: sendData[1]["tps"],
		        word: sendData[2]["word"]
		  })
		
    }).then(resp => {
        if (resp.ok) {
            console.log("성공", resp);
           	return resp.json();
        } else {
            throw new Error(`상태코드 ${resp.status} 수신`, {cause: resp});
        }
    }).then(JsonObj => {
        console.log(JsonObj);
    }).catch(err => {
        console.error(err);
    });
    
	
	//$targetForm.submit();
});




$("a[data-pg-role='pageLink']").on("click", function(event) {
    event.preventDefault();
    let page = $(this).data("pgPage");
    // location.href = "?page="+page;
    let targetFormSelector = $(this).data("pgTarget");
    let $targetForm = $(targetFormSelector);
    $targetForm.find('input[name="page"]').val(page);
    $targetForm.submit();
    return false;
});
